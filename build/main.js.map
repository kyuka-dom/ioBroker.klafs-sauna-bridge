{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.3.0\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from \"@iobroker/adapter-core\";\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\n// init DNS server\nimport dns from \"native-dns\";\n\nimport net from \"net\";\n\n\nclass KlafsSaunaBridge extends utils.Adapter {\n\tprivate socketServer: net.Server;\n\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tname: \"klafs-sauna-bridge\",\n\t\t});\n\t\tthis.on(\"ready\", this.onReady.bind(this));\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\n\t\t// this.on(\"message\", this.onMessage.bind(this));\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\n\t\tthis.socketServer = net.createServer();\n\t}\n\n\t/**\n\t * Is called when databases are connected and adapter received configuration.\n\t */\n\tprivate async onReady(): Promise<void> {\n\t\tthis.setState(\"info.connection\", false, true);\n\t\tthis.setState(\"sauna.ready\", false, true);\n\t\tthis.setState(\"sauna.running\", false, true);\n\t\tthis.setState(\"sauna.currentTemperature\", 0, true);\n\t\tthis.setState(\"sauna.targetTemperature\", 0, true);\n\n\t\tlet realKlafsHost = \"88.198.251.244\";\n\t\t// Initialize your adapter here\n\n\t\t// get real klafs host\n\n\t\tconst question = dns.Question({\n\t\t\tname: \"sauna-app.klafs.com\",\n\t\t\ttype: \"ANY\",\n\t\t});\n\n\t\tconst start = Date.now();\n\n\t\tconst req = dns.Request({\n\t\t\tquestion: question,\n\t\t\tserver: { address: \"8.8.8.8\", port: 53, type: \"udp\" },\n\t\t\ttimeout: 1000,\n\t\t});\n\n\t\treq.on(\"timeout\", () => {\n\t\t\tthis.log.debug(\"Timeout in making request\");\n\t\t});\n\n\t\treq.on(\"message\", (err: any, answer: { answer: any[] }) => {\n\t\t\tanswer.answer.forEach((a) => {\n\t\t\t\tif (a.name === \"sauna-app.klafs.com\" && a.type == 1) {\n\t\t\t\t\tthis.log.debug(\"Settings Klafs Host to \" + a.address);\n\t\t\t\t\trealKlafsHost = a.address;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treq.on(\"end\", () => {\n\t\t\tconst delta = Date.now() - start;\n\t\t\tthis.log.debug(\"Finished processing request: \" + delta.toString() + \"ms\");\n\t\t});\n\n\t\treq.send();\n\n\t\t// init DNS Server\n\t\tconst SERVFAIL = dns.consts.NAME_TO_RCODE.SERVFAIL;\n\t\tconst server = dns.createServer();\n\n\t\tserver.on(\n\t\t\t\"request\",\n\t\t\t(\n\t\t\t\touterRequest: {\n\t\t\t\t\tquestion: { name: any }[];\n\t\t\t\t},\n\t\t\t\touterResponse: {\n\t\t\t\t\tauthority: any;\n\t\t\t\t\theader: any;\n\t\t\t\t\tanswer: any[];\n\t\t\t\t\tadditional: any[];\n\t\t\t\t\tsend: () => void;\n\t\t\t\t},\n\t\t\t) => {\n\t\t\t\tthis.log.debug(outerRequest.question[0].name);\n\t\t\t\tthis.log.debug(JSON.stringify(outerRequest.question[0]));\n\n\t\t\t\tif (outerRequest.question[0].name === \"sauna-app.klafs.com\") {\n\t\t\t\t\t// overwrite request\n\t\t\t\t\touterResponse.answer.push(\n\t\t\t\t\t\tdns.A({\n\t\t\t\t\t\t\tname: \"sauna-app.klafs.com\",\n\t\t\t\t\t\t\taddress: this.config.hostip,\n\t\t\t\t\t\t\tttl: 600,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t\touterResponse.send();\n\t\t\t\t} else {\n\t\t\t\t\tconst innerRequest = dns.Request({\n\t\t\t\t\t\tquestion: outerRequest.question[0],\n\t\t\t\t\t\tserver: {\n\t\t\t\t\t\t\taddress: \"8.8.8.8\",\n\t\t\t\t\t\t\ttype: \"udp\",\n\t\t\t\t\t\t\tport: 53,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcache: false,\n\t\t\t\t\t});\n\n\t\t\t\t\tinnerRequest.send();\n\n\t\t\t\t\t// in the event we get an error or timeout paper over with servfail\n\t\t\t\t\touterResponse.header.rcode = SERVFAIL;\n\n\t\t\t\t\tfunction requestDone() {\n\t\t\t\t\t\touterResponse.send();\n\t\t\t\t\t}\n\n\t\t\t\t\tinnerRequest.on(\n\t\t\t\t\t\t\"message\",\n\t\t\t\t\t\t(\n\t\t\t\t\t\t\terr: any,\n\t\t\t\t\t\t\tinnerResponse: {\n\t\t\t\t\t\t\t\tquestion: any[];\n\t\t\t\t\t\t\t\theader: { rcode: any };\n\t\t\t\t\t\t\t\tanswer: any[];\n\t\t\t\t\t\t\t\tadditional: any[];\n\t\t\t\t\t\t\t\tauthority: any;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t) => {\n\t\t\t\t\t\t\tconsole.log(\"response + \", err, innerResponse.question[0], innerResponse.header);\n\t\t\t\t\t\t\touterResponse.header.rcode = innerResponse.header.rcode;\n\n\t\t\t\t\t\t\touterResponse.answer = innerResponse.answer;\n\t\t\t\t\t\t\touterResponse.additional = innerResponse.additional;\n\t\t\t\t\t\t\touterResponse.authority = innerResponse.authority;\n\t\t\t\t\t\t},\n\t\t\t\t\t);\n\n\t\t\t\t\tinnerRequest.on(\"end\", function () {\n\t\t\t\t\t\trequestDone();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t//console.log(request)\n\t\t\t},\n\t\t);\n\n\t\tserver.on(\"error\", function (err: { stack: any }) {\n\t\t\tconsole.log(err.stack);\n\t\t});\n\n\t\tif (this.config.option1) {\n\t\t\tserver.serve(this.config.option2);\n\t\t}\n\n\t\t// INIT socket\n\t\tthis.socketServer = net.createServer();\n\n\t\tconst handleConnection = (conn: any) => {\n\t\t\tconst remoteAddress = conn.remoteAddress + \":\" + conn.remotePort;\n\t\t\tthis.log.debug(\"new client connection from %s\" + remoteAddress);\n\t\t\tconst onConnData = async (d: any) => {\n\t\t\t\tthis.log.debug(\"connection data from \" + remoteAddress + \":\" + d);\n\t\t\t\tconst hex = d.toString(\"hex\");\n\t\t\t\tif (hex.startsWith(\"0130f00ae200002b08ff14\")) {\n\t\t\t\t\t// status Message -> update the variables\n\t\t\t\t\tconst currentTempHex = hex.substr(42, 2);\n\t\t\t\t\tthis.log.debug(\"currentTemp \" + currentTempHex);\n\t\t\t\t\tconst targetTempHex = hex.substr(36, 2);\n\t\t\t\t\tthis.log.debug(\"targetTemp \" + targetTempHex);\n\t\t\t\t\tconst runningHex = hex.substr(32, 2);\n\t\t\t\t\tthis.log.debug(\"running \" + runningHex);\n\t\t\t\t\tconst readyHex = hex.substr(34, 2);\n\t\t\t\t\tthis.log.debug(\"ready \" + readyHex);\n\t\t\t\t\tawait this.setStateAsync(\"sauna.running\", { val: runningHex == \"02\" ? true : false, ack: true });\n\t\t\t\t\tawait this.setStateAsync(\"sauna.ready\", { val: readyHex == \"03\" ? true : false, ack: true });\n\t\t\t\t\tawait this.setStateAsync(\"sauna.currentTemperature\", {\n\t\t\t\t\t\tval: parseInt(hex.substr(42, 2), 16),\n\t\t\t\t\t\tack: true,\n\t\t\t\t\t});\n\t\t\t\t\tawait this.setStateAsync(\"sauna.targetTemperature\", {\n\t\t\t\t\t\tval: parseInt(hex.substr(36, 2), 16),\n\t\t\t\t\t\tack: true,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis.log.debug(hex);\n\n\t\t\t\tconst client: net.Socket = new net.Socket();\n\t\t\t\tclient.connect(28888, realKlafsHost, () => {\n\t\t\t\t\tthis.log.debug(\"Client Connected\");\n\t\t\t\t\tclient.write(d);\n\t\t\t\t});\n\n\t\t\t\tclient.on(\"data\", (data) => {\n\t\t\t\t\tthis.log.debug(\"Client Received: \" + data);\n\t\t\t\t\tconn.write(data);\n\t\t\t\t\tclient.destroy(); // kill client after server's response\n\t\t\t\t});\n\n\t\t\t\tclient.on(\"close\", () => {\n\t\t\t\t\tthis.log.debug(\"Client Connection closed\");\n\t\t\t\t});\n\t\t\t};\n\t\t\tconn.on(\"data\", onConnData);\n\t\t\tconn.once(\"close\", onConnClose);\n\t\t\tconn.on(\"error\", onConnError);\n\n\t\t\tfunction onConnClose() {\n\t\t\t\tconsole.log(\"connection from %s closed\", remoteAddress);\n\t\t\t}\n\t\t\tfunction onConnError(err: any) {\n\t\t\t\tconsole.log(\"Connection %s error: %s\", remoteAddress, err.message);\n\t\t\t}\n\t\t};\n\n\t\tthis.socketServer.on(\"connection\", handleConnection);\n\t\tthis.socketServer.listen(28888, () => {\n\t\t\tthis.log.info(\"server listening to \" + this.socketServer.address());\n\t\t\tthis.setState(\"info.connection\", true, true);\n\t\t});\n\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\n\t\t// this.config:\n\t\t/*this.log.info(\"config option1: \" + this.config.option1);\n\t\tthis.log.info(\"config option2: \" + this.config.option2);*/\n\n\t\t/*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n\t\t/*await this.setObjectNotExistsAsync(\"testVariable\", {\n\t\t\ttype: \"state\",\n\t\t\tcommon: {\n\t\t\t\tname: \"testVariable\",\n\t\t\t\ttype: \"boolean\",\n\t\t\t\trole: \"indicator\",\n\t\t\t\tread: true,\n\t\t\t\twrite: true,\n\t\t\t},\n\t\t\tnative: {},\n\t\t});*/\n\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n\t\t/*this.subscribeStates(\"testVariable\");*/\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n\t\t// this.subscribeStates(\"lights.*\");\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n\t\t// this.subscribeStates(\"*\");\n\n\t\t/*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n\t\t// the variable testVariable is set to true as command (ack=false)\n\t\t/*await this.setStateAsync(\"testVariable\", true);\n\n\t\t// same thing, but the value is flagged \"ack\"\n\t\t// ack should be always set to true if the value is received from or acknowledged from the target system\n\t\tawait this.setStateAsync(\"testVariable\", { val: true, ack: true });\n\n\t\t// same thing, but the state is deleted after 30s (getState will return null afterwards)\n\t\tawait this.setStateAsync(\"testVariable\", { val: true, ack: true, expire: 30 });\n\n\t\t// examples for the checkPassword/checkGroup functions\n\t\tlet result = await this.checkPasswordAsync(\"admin\", \"iobroker\");\n\t\tthis.log.info(\"check user admin pw iobroker: \" + result);\n\n\t\tresult = await this.checkGroupAsync(\"admin\", \"admin\");\n\t\tthis.log.info(\"check group user admin group admin: \" + result);*/\n\t}\n\n\t/**\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\n\t */\n\tprivate onUnload(callback: () => void): void {\n\t\ttry {\n\t\t\tthis.socketServer.close();\n\t\t\tthis.setState(\"info.connection\", false, true);\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\n\t\t\t// clearTimeout(timeout1);\n\t\t\t// clearTimeout(timeout2);\n\t\t\t// ...\n\t\t\t// clearInterval(interval1);\n\n\t\t\tcallback();\n\t\t} catch (e) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n\t// /**\n\t//  * Is called if a subscribed object changes\n\t//  */\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n\t// \tif (obj) {\n\t// \t\t// The object was changed\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n\t// \t} else {\n\t// \t\t// The object was deleted\n\t// \t\tthis.log.info(`object ${id} deleted`);\n\t// \t}\n\t// }\n\n\t/**\n\t * Is called if a subscribed state changes\n\t */\n\tprivate onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n\t\tif (state) {\n\t\t\t// The state was changed\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n\t\t} else {\n\t\t\t// The state was deleted\n\t\t\tthis.log.info(`state ${id} deleted`);\n\t\t}\n\t}\n\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n\t// /**\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n\t//  */\n\t// private onMessage(obj: ioBroker.Message): void {\n\t// \tif (typeof obj === \"object\" && obj.message) {\n\t// \t\tif (obj.command === \"send\") {\n\t// \t\t\t// e.g. send email or pushover or whatever\n\t// \t\t\tthis.log.info(\"send command\");\n\n\t// \t\t\t// Send response in callback if required\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\n\t// \t\t}\n\t// \t}\n\t// }\n}\n\nif (require.main !== module) {\n\t// Export the constructor in compact mode\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new KlafsSaunaBridge(options);\n} else {\n\t// otherwise start the instance directly\n\t(() => new KlafsSaunaBridge())();\n}\n"],
  "mappings": "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",
  "names": ["net", "dns", "requestDone"]
}
